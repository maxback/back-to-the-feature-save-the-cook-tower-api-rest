// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    [Migration("20200520030845_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_cardapio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(8541),
                            CategoriaId = new Guid("70ff797f-14c8-43d0-a7e4-8a2b2f5d6692"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(8530),
                            Descricao = "Dieta abase de pão comum",
                            ForaDeUso = false,
                            Nome = "Comendo pão no café da manhã todo dia (mensal)",
                            Sinonimos = "café"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cbb65ef-21bf-4751-8239-0b018b154b71"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(2948),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(2939),
                            ForaDeUso = false,
                            Nome = "Categorias",
                            Sinonimos = "Categoria Raiz"
                        },
                        new
                        {
                            Id = new Guid("aeb5ead3-79e4-4595-b3a9-f5caa92ca058"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(4261),
                            CategoriaPaiId = new Guid("8cbb65ef-21bf-4751-8239-0b018b154b71"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(4253),
                            ForaDeUso = false,
                            Nome = "Ingredientes",
                            Sinonimos = "Categoria Raiz dos Ingredientes"
                        },
                        new
                        {
                            Id = new Guid("b68be1c1-27d4-4c48-b667-e163d26eb681"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5508),
                            CategoriaPaiId = new Guid("aeb5ead3-79e4-4595-b3a9-f5caa92ca058"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5500),
                            ForaDeUso = false,
                            Nome = "Carnes",
                            Sinonimos = "carnes"
                        },
                        new
                        {
                            Id = new Guid("08e1e5ad-9ae2-4729-8fbb-77f1426f3d05"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5660),
                            CategoriaPaiId = new Guid("aeb5ead3-79e4-4595-b3a9-f5caa92ca058"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5656),
                            ForaDeUso = false,
                            Nome = "hortifrutigranjeiro",
                            Sinonimos = "hortaliças,frutas,verduras,ovos,hortifruti"
                        },
                        new
                        {
                            Id = new Guid("2ddd92e1-ad5c-45d2-bb2d-ca4148f6fdf9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5731),
                            CategoriaPaiId = new Guid("aeb5ead3-79e4-4595-b3a9-f5caa92ca058"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5728),
                            ForaDeUso = false,
                            Nome = "geral",
                            Sinonimos = "geral"
                        },
                        new
                        {
                            Id = new Guid("70ff797f-14c8-43d0-a7e4-8a2b2f5d6692"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5900),
                            CategoriaPaiId = new Guid("8cbb65ef-21bf-4751-8239-0b018b154b71"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5895),
                            ForaDeUso = false,
                            Nome = "Cardápios",
                            Sinonimos = "Categoria Raiz dos Cardápios"
                        },
                        new
                        {
                            Id = new Guid("f782113b-c4e6-4918-b69e-df0f74b929b4"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5982),
                            CategoriaPaiId = new Guid("8cbb65ef-21bf-4751-8239-0b018b154b71"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(5979),
                            ForaDeUso = false,
                            Nome = "Receitas",
                            Sinonimos = "Categoria Raiz das Receitas"
                        },
                        new
                        {
                            Id = new Guid("280092d9-a30f-418d-a066-1fb81197e245"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6091),
                            CategoriaPaiId = new Guid("f782113b-c4e6-4918-b69e-df0f74b929b4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6088),
                            ForaDeUso = false,
                            Nome = "Tortas",
                            Sinonimos = "Categoria Raiz das tortas"
                        },
                        new
                        {
                            Id = new Guid("0dcf5246-fbc6-43c5-a28d-11b443fb367e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6102),
                            CategoriaPaiId = new Guid("f782113b-c4e6-4918-b69e-df0f74b929b4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6101),
                            ForaDeUso = false,
                            Nome = "Café da manhã",
                            Sinonimos = "Cafe da manha"
                        },
                        new
                        {
                            Id = new Guid("29546daa-16eb-4c3a-9281-c56f83c127ce"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6212),
                            CategoriaPaiId = new Guid("f782113b-c4e6-4918-b69e-df0f74b929b4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(6209),
                            ForaDeUso = false,
                            Nome = "Jantar",
                            Sinonimos = "Categoria Raiz dos Jantares"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1982a2f6-8d26-429a-8719-cb739b5325da"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(7035),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(7025),
                            DestinoId = new Guid("8793a798-75b8-41f9-9f5b-fca8d3d5340b"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("b6883dbe-e132-42f3-a0a1-01a355d209bf"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("6dea2b1a-2d07-4c9b-9223-f6cb5844ce6e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(1759),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(1745),
                            DestinoId = new Guid("f76caf8a-2ebe-49d7-8235-a3950904c106"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("21e64e53-3b7a-4f37-afe6-62c42f6119e8"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f952a08b-f489-412a-8fd1-ea30fb499145"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(7153),
                            CategoriaId = new Guid("2ddd92e1-ad5c-45d2-bb2d-ca4148f6fdf9"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(7144),
                            ForaDeUso = false,
                            Nome = "Farinha de Trigo",
                            Sinonimos = "Trigo"
                        },
                        new
                        {
                            Id = new Guid("a8a6d044-8a7e-4314-a5de-ca0dc92e964e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8594),
                            CategoriaId = new Guid("2ddd92e1-ad5c-45d2-bb2d-ca4148f6fdf9"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8583),
                            ForaDeUso = false,
                            Nome = "Fermento para Pão",
                            Sinonimos = "Fermento biológico"
                        },
                        new
                        {
                            Id = new Guid("ed943cd6-7806-4e24-81a8-e38b8349b858"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8821),
                            CategoriaId = new Guid("08e1e5ad-9ae2-4729-8fbb-77f1426f3d05"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8813),
                            ForaDeUso = false,
                            Nome = "Ovo de galinha",
                            Sinonimos = "Ovo"
                        },
                        new
                        {
                            Id = new Guid("681a4fad-2829-47e4-ac61-d0406a4c7f36"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8948),
                            CategoriaId = new Guid("2ddd92e1-ad5c-45d2-bb2d-ca4148f6fdf9"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 916, DateTimeKind.Utc).AddTicks(8941),
                            ForaDeUso = false,
                            Nome = "Água",
                            Sinonimos = "Agua"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnName("n_dia_da_semana")
                        .HasColumnType("int");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Porcoes")
                        .HasColumnName("n_porcoes")
                        .HasColumnType("int");

                    b.Property<int>("Semana")
                        .HasColumnName("n_semana")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.ToTable("item_cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01f65feb-e709-41d8-b9ff-9243bf2d4058"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(2010),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(1992),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("8f242d5c-240a-4c96-9fcc-4677902c3c5a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(7632),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(7622),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e2c8a624-bdb3-47a4-8cf4-fca0bcb947a9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8030),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8024),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("8d7f0bb2-5235-48fc-9ba9-a4b1191024a9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8258),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8253),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1c06861c-dc95-4916-844d-46d6f74122fb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8473),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8468),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("3c5fa394-112a-4b6c-a55f-ac7b841f0591"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8695),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8690),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("003e1cf4-55b2-41ab-93f7-b1ce9c14a1e3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8919),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(8914),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("080d1885-d957-4ff7-8ac3-4504783a6a8e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9129),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9125),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("9074c307-7b70-4426-87e9-47a355db1164"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9366),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9360),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("fa85277e-19a0-45d6-9a0d-86eb6e014ed6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9586),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9581),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("3a1dcdcb-560d-47d7-9a7a-fcb725b40d27"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9996),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 920, DateTimeKind.Utc).AddTicks(9987),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("ac31a87e-702e-4aa1-8dea-df37f172cfe6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(325),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(320),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("040ace79-9c66-40c5-8d90-cf428b468e6a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(641),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(611),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("07ec8272-ec8e-4ba0-a5e0-ad1147a5a117"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(967),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(962),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1366adb5-c08e-4fc9-a754-d95504f62b33"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1193),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1189),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("7214f836-4bf6-4798-8912-756d9fc66615"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1403),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1398),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("7dae4518-90a0-405f-bd7c-83321aa8f070"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1653),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1648),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("242fb063-0410-4b6e-8b7e-370ffee9edb8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1885),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(1879),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("09c0b785-a043-4e19-b05b-e1f457a1403b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2095),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2090),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1f9b0a12-b42f-4c6e-be4d-bffb9c222ddf"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2301),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2296),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c02879a1-42b5-4b11-832e-f9079456f46b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2506),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2501),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("cc7a5c8f-2225-4dcb-b7da-209ed4663317"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2969),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(2935),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("cc9c0e14-2928-4e99-ab47-11dbc7aad542"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3301),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3295),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("f357e058-7609-4993-a69a-51788a52f282"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3529),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3525),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("44e888c9-0cea-4ff5-98a4-08fec317386c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3765),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3760),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("2d68599e-631f-4f84-b418-ff1c655a19bd"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3983),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(3978),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e99c3418-f6b6-4ccb-838d-afa459309513"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(4207),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(4203),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("bf577664-520f-45a4-b6a5-a8ea8b01f47f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(4419),
                            CardapioId = new Guid("80f4e723-4987-4e7a-be9d-85ee03a149f4"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(4414),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "{diasS[dia]} da semana {semana} - {s}",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemCardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("item_cardapio_receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d58c496c-a0c6-443a-b8c1-9f768f2f7540"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(5756),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(5746),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("01f65feb-e709-41d8-b9ff-9243bf2d4058"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("c99a53ef-3b64-4837-97c5-3fc1615a8824"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8232),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8224),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("8f242d5c-240a-4c96-9fcc-4677902c3c5a"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("ea9a2f0c-4fd4-4009-bf1a-2272726ea8be"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8352),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8348),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e2c8a624-bdb3-47a4-8cf4-fca0bcb947a9"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("d4e01a9d-5c87-45b8-bd33-cd6459b58a66"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8427),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8424),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("8d7f0bb2-5235-48fc-9ba9-a4b1191024a9"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("4f18de6f-c106-425f-aa18-eabbe7cb0e95"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8527),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8524),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1c06861c-dc95-4916-844d-46d6f74122fb"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("d4ab30e5-0cb0-4800-b9ed-8c80c2c54989"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8607),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8604),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("3c5fa394-112a-4b6c-a55f-ac7b841f0591"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("a33058a6-727c-4695-994f-72571cc0875b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8677),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8674),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("003e1cf4-55b2-41ab-93f7-b1ce9c14a1e3"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("caeb7668-53dd-4007-8f9b-2c0930aa911d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8745),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8742),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("080d1885-d957-4ff7-8ac3-4504783a6a8e"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("d18fff23-670a-432a-944a-ad9aac24ec0e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8813),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8810),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("9074c307-7b70-4426-87e9-47a355db1164"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("35104d47-7191-40df-9ba2-2f896669b337"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8900),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8897),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("fa85277e-19a0-45d6-9a0d-86eb6e014ed6"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("f7bce275-d300-4e3d-83c9-7d2d901f3344"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8969),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(8966),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("3a1dcdcb-560d-47d7-9a7a-fcb725b40d27"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("e7504335-028d-4e61-b00e-e61c2202d5c5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9036),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9033),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("ac31a87e-702e-4aa1-8dea-df37f172cfe6"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("8fde6fe0-5700-447e-9282-b3ddb841bb84"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9122),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9119),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("040ace79-9c66-40c5-8d90-cf428b468e6a"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("18a1566e-df13-4fc7-942b-72ec0f929d72"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9194),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9190),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("07ec8272-ec8e-4ba0-a5e0-ad1147a5a117"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("f4881d80-6632-42f3-8fc4-7d0fad82c8ed"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9261),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9257),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1366adb5-c08e-4fc9-a754-d95504f62b33"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("07901eef-4a21-4a75-a0b1-a3b57f566985"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9328),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9325),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("7214f836-4bf6-4798-8912-756d9fc66615"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("270ce40e-87a2-4c3f-8b24-adbf4b71ff58"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9394),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9391),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("7dae4518-90a0-405f-bd7c-83321aa8f070"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("b065fc12-fd52-458b-8436-a1bf0f47a867"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9466),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9463),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("242fb063-0410-4b6e-8b7e-370ffee9edb8"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("6f836e6c-5c72-475f-b8b2-bf5536745ae3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9533),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9530),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("09c0b785-a043-4e19-b05b-e1f457a1403b"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("39c41e01-c98d-4997-886b-072bdc9e5286"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9599),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9596),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1f9b0a12-b42f-4c6e-be4d-bffb9c222ddf"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("2b2bfe76-6327-4406-9d1c-689857133eb8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9708),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9704),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c02879a1-42b5-4b11-832e-f9079456f46b"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("46c358eb-0820-46e7-9d90-6ace5d1c9b6d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9778),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9775),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("cc7a5c8f-2225-4dcb-b7da-209ed4663317"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("014d9a3b-2605-439c-a0c9-34cf5b071ada"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9843),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9840),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("cc9c0e14-2928-4e99-ab47-11dbc7aad542"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("e44f89bb-d60b-40ab-a40e-877b933dc539"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9907),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9905),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("f357e058-7609-4993-a69a-51788a52f282"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("c230d160-ceed-4aef-9929-d20ca3e28b19"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9973),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 921, DateTimeKind.Utc).AddTicks(9970),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("44e888c9-0cea-4ff5-98a4-08fec317386c"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("63f6bed8-e3a6-4532-88fa-5632b9304e95"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(39),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(36),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("2d68599e-631f-4f84-b418-ff1c655a19bd"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("f0fe8711-441e-4c15-96c3-0b5cdc336d54"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(105),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(102),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e99c3418-f6b6-4ccb-838d-afa459309513"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        },
                        new
                        {
                            Id = new Guid("02b9f432-4ecc-4bdb-bcd5-8a8c6d9ffd5a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(169),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 922, DateTimeKind.Utc).AddTicks(167),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("bf577664-520f-45a4-b6a5-a8ea8b01f47f"),
                            Nome = "Rel. Item Cardápio({diasS[dia]} da semana {semana} - {s}) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9829953a-43af-4871-ab8d-86dc689b6f0b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 917, DateTimeKind.Utc).AddTicks(8346),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 917, DateTimeKind.Utc).AddTicks(8331),
                            ForaDeUso = false,
                            IngredienteId = new Guid("f952a08b-f489-412a-8fd1-ea30fb499145"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            UnidadeMedidaId = new Guid("21e64e53-3b7a-4f37-afe6-62c42f6119e8")
                        },
                        new
                        {
                            Id = new Guid("837524ee-3435-4b34-b92c-4301b6c61d79"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(6582),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(6569),
                            ForaDeUso = false,
                            IngredienteId = new Guid("f952a08b-f489-412a-8fd1-ea30fb499145"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            UnidadeMedidaId = new Guid("21e64e53-3b7a-4f37-afe6-62c42f6119e8")
                        },
                        new
                        {
                            Id = new Guid("2e26e016-6d3c-4f53-953a-704d0a6a0ca8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(6902),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(6895),
                            ForaDeUso = false,
                            IngredienteId = new Guid("a8a6d044-8a7e-4314-a5de-ca0dc92e964e"),
                            Nome = "Fermento para Pão",
                            Ordem = 1,
                            Quantidade = 1.0,
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            UnidadeMedidaId = new Guid("21e64e53-3b7a-4f37-afe6-62c42f6119e8")
                        },
                        new
                        {
                            Id = new Guid("9c601dd9-08dd-42b5-9a59-2be1d39ac4da"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(7039),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(7034),
                            ForaDeUso = false,
                            IngredienteId = new Guid("ed943cd6-7806-4e24-81a8-e38b8349b858"),
                            Nome = "Ovo de galinha",
                            Ordem = 2,
                            Quantidade = 5.0,
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            UnidadeMedidaId = new Guid("e06c7d77-91d2-4ca4-bbae-3240889a058b")
                        },
                        new
                        {
                            Id = new Guid("495f9ad3-f946-4c7d-b815-37ec223fd613"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(7171),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 918, DateTimeKind.Utc).AddTicks(7166),
                            ForaDeUso = false,
                            IngredienteId = new Guid("681a4fad-2829-47e4-ac61-d0406a4c7f36"),
                            Nome = "Água",
                            Ordem = 3,
                            Quantidade = 0.5,
                            ReceitaId = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            UnidadeMedidaId = new Guid("f76caf8a-2ebe-49d7-8235-a3950904c106")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9b2546b-fdc9-4752-9aea-225c680f1403"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 917, DateTimeKind.Utc).AddTicks(355),
                            CategoriaId = new Guid("0dcf5246-fbc6-43c5-a28d-11b443fb367e"),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 917, DateTimeKind.Utc).AddTicks(345),
                            ForaDeUso = false,
                            Nome = "Pão de Forma",
                            RendimentoPorcoes = 5,
                            Sinonimos = "Pão assado,pao assado",
                            TempoPreparoMinutos = 120
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e06c7d77-91d2-4ca4-bbae-3240889a058b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(1146),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(1134),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidades,unidade(un)",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("96c8ddb7-0e6e-48ac-8f5d-0842a84f1f6e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5052),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5042),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("98410cd2-ccd1-4d1e-9129-6c02ffe7d32e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5312),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5308),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("f76caf8a-2ebe-49d7-8235-a3950904c106"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5327),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5326),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("21e64e53-3b7a-4f37-afe6-62c42f6119e8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5403),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5400),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("572def3d-ed91-4f41-a1a4-75bda3efd345"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5476),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5474),
                            ForaDeUso = false,
                            Nome = "pitada",
                            NomeResumido = "pt",
                            Sinonimos = "pitada,punhadinho,cadinho",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("54700d38-4185-4214-98bc-699e03c5117d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5596),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5594),
                            ForaDeUso = false,
                            Nome = "colher de sopa",
                            NomeResumido = "cso",
                            Sinonimos = "colher media",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("a6db85da-bf6f-4082-aeb7-c48f2f1ac096"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5659),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5657),
                            ForaDeUso = false,
                            Nome = "fatia",
                            NomeResumido = "fat",
                            Sinonimos = "fatia",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("5ff960a1-6ab7-45db-99ab-f61bfcbb639a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5750),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5747),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidade",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("bcdc29b8-8308-4b2b-b61d-cc64ce49fbf4"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5541),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5538),
                            ForaDeUso = false,
                            Nome = "colher de chá",
                            NomeResumido = "ccha",
                            Sinonimos = "colher pequena",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("b6883dbe-e132-42f3-a0a1-01a355d209bf"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5826),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5823),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("8793a798-75b8-41f9-9f5b-fca8d3d5340b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5886),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 915, DateTimeKind.Utc).AddTicks(5883),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a1dcce0-7548-4786-bb4e-a3f5235d8cde"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 901, DateTimeKind.Utc).AddTicks(8575),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 901, DateTimeKind.Utc).AddTicks(7287),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("b50c6fca-31d3-48ab-b1ef-b584d810bf36"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 914, DateTimeKind.Utc).AddTicks(8455),
                            CriadoEmUtc = new DateTime(2020, 5, 20, 3, 8, 43, 914, DateTimeKind.Utc).AddTicks(8413),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Cardapios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Cardapio", "Cardapio")
                        .WithMany("Itens")
                        .HasForeignKey("CardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.ItemCardapio", "ItemCardapio")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
