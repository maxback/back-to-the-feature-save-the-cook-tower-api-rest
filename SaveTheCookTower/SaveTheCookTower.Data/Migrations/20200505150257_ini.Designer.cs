// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    [Migration("20200505150257_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_cardapio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 786, DateTimeKind.Utc).AddTicks(190),
                            CategoriaId = new Guid("10faa48a-deae-4967-8399-b20f413f0e54"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 786, DateTimeKind.Utc).AddTicks(182),
                            Descricao = "Dieta abase de pão comum",
                            ForaDeUso = false,
                            Nome = "Comendo pão no café da manhã todo dia (mensal)",
                            Sinonimos = "café"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44c85429-abfe-44d4-9e4a-3dde505d8515"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(2696),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(2688),
                            ForaDeUso = false,
                            Nome = "Categorias",
                            Sinonimos = "Categoria Raiz"
                        },
                        new
                        {
                            Id = new Guid("ad93c813-de74-4bf8-9383-d405a8ada49c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(3928),
                            CategoriaPaiId = new Guid("44c85429-abfe-44d4-9e4a-3dde505d8515"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(3920),
                            ForaDeUso = false,
                            Nome = "Ingredientes",
                            Sinonimos = "Categoria Raiz dos Ingredientes"
                        },
                        new
                        {
                            Id = new Guid("10faa48a-deae-4967-8399-b20f413f0e54"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5107),
                            CategoriaPaiId = new Guid("44c85429-abfe-44d4-9e4a-3dde505d8515"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5100),
                            ForaDeUso = false,
                            Nome = "Cardápios",
                            Sinonimos = "Categoria Raiz dos Cardápios"
                        },
                        new
                        {
                            Id = new Guid("d25189af-510c-43b8-b225-89a7c8518067"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5212),
                            CategoriaPaiId = new Guid("44c85429-abfe-44d4-9e4a-3dde505d8515"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5209),
                            ForaDeUso = false,
                            Nome = "Receitas",
                            Sinonimos = "Categoria Raiz das Receitas"
                        },
                        new
                        {
                            Id = new Guid("26267275-8c0a-4d91-b7eb-2587249b85dd"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5311),
                            CategoriaPaiId = new Guid("d25189af-510c-43b8-b225-89a7c8518067"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5308),
                            ForaDeUso = false,
                            Nome = "Tortas",
                            Sinonimos = "Categoria Raiz das tortas"
                        },
                        new
                        {
                            Id = new Guid("62074504-b97e-4b2d-bdf0-bb40265024e5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5331),
                            CategoriaPaiId = new Guid("d25189af-510c-43b8-b225-89a7c8518067"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5330),
                            ForaDeUso = false,
                            Nome = "Café da manhã",
                            Sinonimos = "Cafe da manha"
                        },
                        new
                        {
                            Id = new Guid("fc4e215b-6dfc-4db0-8c9b-e4a35e6e750d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5455),
                            CategoriaPaiId = new Guid("d25189af-510c-43b8-b225-89a7c8518067"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(5452),
                            ForaDeUso = false,
                            Nome = "Jantar",
                            Sinonimos = "Categoria Raiz dos Jantares"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("502e2046-a681-47be-8cc9-34ab9c796b52"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(7087),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(7079),
                            DestinoId = new Guid("78be9b06-a0e1-47c5-8f40-5c13061eb1f2"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("937cb99e-d87f-40df-9009-3b5abecf2d84"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("b9824e28-8622-4e17-9ec1-f7f379254d1a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(1628),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(1620),
                            DestinoId = new Guid("9c9fb002-47ec-4322-92b9-c035fa8d69dd"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("3231aeff-289a-4b95-a354-d8fe019e6366"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8061d894-dc40-4315-a1bd-f32eb6a13fc0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(6342),
                            CategoriaId = new Guid("ad93c813-de74-4bf8-9383-d405a8ada49c"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(6334),
                            ForaDeUso = false,
                            Nome = "Farinha de Trigo",
                            Sinonimos = "Trigo"
                        },
                        new
                        {
                            Id = new Guid("c24449e8-03f4-423d-a0b4-bffc207021c0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7621),
                            CategoriaId = new Guid("ad93c813-de74-4bf8-9383-d405a8ada49c"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7614),
                            ForaDeUso = false,
                            Nome = "Fermento para Pão",
                            Sinonimos = "Fermento biológico"
                        },
                        new
                        {
                            Id = new Guid("fff275f4-152f-43e0-bd2c-f3a86be650fc"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7725),
                            CategoriaId = new Guid("ad93c813-de74-4bf8-9383-d405a8ada49c"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7722),
                            ForaDeUso = false,
                            Nome = "Ovo de galinha",
                            Sinonimos = "Ovo"
                        },
                        new
                        {
                            Id = new Guid("42a1cdca-3015-44f3-a1ea-ca6b832b3e38"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7784),
                            CategoriaId = new Guid("ad93c813-de74-4bf8-9383-d405a8ada49c"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(7781),
                            ForaDeUso = false,
                            Nome = "Água",
                            Sinonimos = "Agua"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnName("n_dia_da_semana")
                        .HasColumnType("int");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Porcoes")
                        .HasColumnName("n_porcoes")
                        .HasColumnType("int");

                    b.Property<int>("Semana")
                        .HasColumnName("n_semana")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.ToTable("item_cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3f3f47d-7524-428e-b32b-aadd9341fae1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(1787),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(1752),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Domingo da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("6197df82-2aa3-4d36-8fda-6d5362f01790"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7163),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7154),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Segunda-feira da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e268dc25-b04e-4fb4-b11c-ad5ebab15f3c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7534),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7528),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Terça-feira da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("ca4a6ab6-e4af-49bc-b539-068295555ec3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7778),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(7774),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Quarta-feira da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("d915e019-c1db-47b6-a0c9-4d3fd39daab2"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8025),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8020),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Quinta-feira da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e40af40f-4b1b-4576-bbac-25211ec68a39"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8247),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8243),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Sexta-feira da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("7c3afe4d-2907-4ccb-8ed2-ff6443ed22af"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8451),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8446),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Sábado da semana $1 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("10343b07-8b1c-46f0-9a7b-4a61f45fa006"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8654),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8650),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Domingo da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("2c2fe350-9c5d-4f0a-8d53-8ac4bf7f32f6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8856),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(8852),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Segunda-feira da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("45c7a224-7153-40f0-aaa0-e50e9204351c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9067),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9063),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Terça-feira da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("f2378410-219e-4c7a-ac03-8fa6522139da"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9268),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9264),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Quarta-feira da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("cdeca2b5-0fb5-4c8c-8b39-e6f2d86abf73"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9480),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9476),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Quinta-feira da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("fbabbce7-42a4-49c5-a939-30b5b4f50ea9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9706),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9701),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Sexta-feira da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("099683cc-5bc3-4c15-b407-1cb6de6c604d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9913),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 787, DateTimeKind.Utc).AddTicks(9908),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Sábado da semana $2 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("294a030d-e302-4d0c-a691-b90ef54dbc9a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(114),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(110),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Domingo da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("3288c56c-29c3-471f-bbbc-5c6b32819ff8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(316),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(312),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Segunda-feira da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c3cf167d-1429-4c53-905b-0595a1a400a0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(515),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(511),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Terça-feira da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("0f6e9bfc-99ea-48c7-992e-ea648cd6df7e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(722),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(718),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Quarta-feira da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("521ac6fc-9722-4a25-9b7b-ad966c7ee95a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(921),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(917),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Quinta-feira da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("33f51fd4-3ec9-4ee7-ab44-178f98d2160f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1169),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1165),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Sexta-feira da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("cce88608-963e-4c0d-a20f-07ef5284be64"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1405),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1400),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Sábado da semana $3 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("23c676bb-86d2-4317-bb8b-d918d4332bf5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1615),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1611),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Domingo da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("da1e1e03-e976-4c08-9819-99ceaded51ce"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1817),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(1813),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Segunda-feira da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("4edfcbec-b451-4041-9c61-c4dd1169c55e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2016),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2012),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Terça-feira da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("7cba3a13-a805-45b3-bc4b-59dc8751875a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2214),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2210),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Quarta-feira da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("aa221fac-a392-4472-8675-f4226e6246cc"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2412),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2408),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Quinta-feira da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("25bc0d10-727b-4df9-b666-bb90a92e1cd6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2611),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2607),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Sexta-feira da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("414b8c6a-524d-45e4-ae70-0da38d67b8b1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2809),
                            CardapioId = new Guid("65069fcf-c2d3-4dba-8abe-fb8664d77dc4"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(2805),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Sábado da semana $4 - $Café da Manhã",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemCardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("item_cardapio_receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aef2f02d-77c9-4013-93c2-642cb6068842"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(3938),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(3930),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e3f3f47d-7524-428e-b32b-aadd9341fae1"),
                            Nome = "Rel. Item Cardápio(Domingo da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("cad1e79c-74a7-437d-8ba3-7b3bfa0e186c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6219),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6210),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("6197df82-2aa3-4d36-8fda-6d5362f01790"),
                            Nome = "Rel. Item Cardápio(Segunda-feira da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("7b36a671-0b4c-469a-a440-709dc07ae1b5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6330),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6327),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e268dc25-b04e-4fb4-b11c-ad5ebab15f3c"),
                            Nome = "Rel. Item Cardápio(Terça-feira da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("a7a0683f-5a4e-472d-86e9-a8fd4c630b6f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6394),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6392),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("ca4a6ab6-e4af-49bc-b539-068295555ec3"),
                            Nome = "Rel. Item Cardápio(Quarta-feira da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("13b0b013-e8d7-4eae-862c-42ab67a7e540"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6458),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6455),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("d915e019-c1db-47b6-a0c9-4d3fd39daab2"),
                            Nome = "Rel. Item Cardápio(Quinta-feira da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("2e921695-3142-4283-88bb-16b99d1b58dd"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6527),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6524),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e40af40f-4b1b-4576-bbac-25211ec68a39"),
                            Nome = "Rel. Item Cardápio(Sexta-feira da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("11229f3b-21c0-479c-8d53-12fc0b35ae8f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6588),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6585),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("7c3afe4d-2907-4ccb-8ed2-ff6443ed22af"),
                            Nome = "Rel. Item Cardápio(Sábado da semana $1 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("84cd1c95-61b2-4ef9-abe2-6e89b4bd67b8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6649),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6646),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("10343b07-8b1c-46f0-9a7b-4a61f45fa006"),
                            Nome = "Rel. Item Cardápio(Domingo da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("a59aa095-0bae-4a41-ad5d-fe10ace3cea0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6736),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6733),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("2c2fe350-9c5d-4f0a-8d53-8ac4bf7f32f6"),
                            Nome = "Rel. Item Cardápio(Segunda-feira da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("56781146-fc59-4508-85ac-3f904ad0dc2f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6808),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6805),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("45c7a224-7153-40f0-aaa0-e50e9204351c"),
                            Nome = "Rel. Item Cardápio(Terça-feira da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("5437f0ce-f1f5-4bd3-96d3-5cdadf14efb0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6870),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6867),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("f2378410-219e-4c7a-ac03-8fa6522139da"),
                            Nome = "Rel. Item Cardápio(Quarta-feira da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("d5856178-6358-4475-a9f7-9949277b5a54"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6942),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(6939),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("cdeca2b5-0fb5-4c8c-8b39-e6f2d86abf73"),
                            Nome = "Rel. Item Cardápio(Quinta-feira da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("ce93177a-f175-4b1e-81e4-114cb9d6be1c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7007),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7004),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("fbabbce7-42a4-49c5-a939-30b5b4f50ea9"),
                            Nome = "Rel. Item Cardápio(Sexta-feira da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("e7771457-e3d8-45e1-9ea6-efa7ff8aa6c1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7068),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7066),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("099683cc-5bc3-4c15-b407-1cb6de6c604d"),
                            Nome = "Rel. Item Cardápio(Sábado da semana $2 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("0370a7dc-a902-468b-a19a-f18f46298b8c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7129),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7126),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("294a030d-e302-4d0c-a691-b90ef54dbc9a"),
                            Nome = "Rel. Item Cardápio(Domingo da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("3c113b7f-33c0-4624-9ad2-e5182e0ce101"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7189),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7187),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("3288c56c-29c3-471f-bbbc-5c6b32819ff8"),
                            Nome = "Rel. Item Cardápio(Segunda-feira da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("d1a6291a-02f4-4e2f-abea-2ab4fa1e72cb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7269),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7266),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c3cf167d-1429-4c53-905b-0595a1a400a0"),
                            Nome = "Rel. Item Cardápio(Terça-feira da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("ae81e26d-074d-4f2f-b2b2-438a773fb85d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7338),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7335),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("0f6e9bfc-99ea-48c7-992e-ea648cd6df7e"),
                            Nome = "Rel. Item Cardápio(Quarta-feira da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("204ec46d-ee62-4ec8-836d-4bce6dac26c3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7399),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7397),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("521ac6fc-9722-4a25-9b7b-ad966c7ee95a"),
                            Nome = "Rel. Item Cardápio(Quinta-feira da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("54cce02d-bde6-4dcf-9c2e-82072cfe88cb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7460),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7457),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("33f51fd4-3ec9-4ee7-ab44-178f98d2160f"),
                            Nome = "Rel. Item Cardápio(Sexta-feira da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("8ef5b64c-7d0c-43fc-8e74-a83a1f017060"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7522),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7519),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("cce88608-963e-4c0d-a20f-07ef5284be64"),
                            Nome = "Rel. Item Cardápio(Sábado da semana $3 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("8995f09c-9681-4dcd-baee-bc8b1d9229aa"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7582),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7580),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("23c676bb-86d2-4317-bb8b-d918d4332bf5"),
                            Nome = "Rel. Item Cardápio(Domingo da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("8d70b5fb-f02d-4449-b4e5-58da7ac383d8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7650),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7648),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("da1e1e03-e976-4c08-9819-99ceaded51ce"),
                            Nome = "Rel. Item Cardápio(Segunda-feira da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("58e6dafb-fbdb-4477-9052-df877b7373d8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7714),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7712),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("4edfcbec-b451-4041-9c61-c4dd1169c55e"),
                            Nome = "Rel. Item Cardápio(Terça-feira da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("d08b268e-fe40-410f-b620-ce25a75a7df2"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7794),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7791),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("7cba3a13-a805-45b3-bc4b-59dc8751875a"),
                            Nome = "Rel. Item Cardápio(Quarta-feira da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("9b9b1dc8-9e1b-4464-b045-31f6b9d067f6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7860),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7858),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("aa221fac-a392-4472-8675-f4226e6246cc"),
                            Nome = "Rel. Item Cardápio(Quinta-feira da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("c8dbd15a-dc51-4113-b865-b5e7fea71dba"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7922),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7919),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("25bc0d10-727b-4df9-b666-bb90a92e1cd6"),
                            Nome = "Rel. Item Cardápio(Sexta-feira da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        },
                        new
                        {
                            Id = new Guid("fb75ef4d-9b75-43bb-81d1-712cb5e57e24"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7982),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 788, DateTimeKind.Utc).AddTicks(7979),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("414b8c6a-524d-45e4-ae70-0da38d67b8b1"),
                            Nome = "Rel. Item Cardápio(Sábado da semana $4 - $Café da Manhã) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8dac617-e191-4999-a200-2d63b2e8ada9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(3538),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(3529),
                            ForaDeUso = false,
                            IngredienteId = new Guid("8061d894-dc40-4315-a1bd-f32eb6a13fc0"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            UnidadeMedidaId = new Guid("3231aeff-289a-4b95-a354-d8fe019e6366")
                        },
                        new
                        {
                            Id = new Guid("4fc55a97-7c62-4932-a827-9802fd684659"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(8916),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(8908),
                            ForaDeUso = false,
                            IngredienteId = new Guid("8061d894-dc40-4315-a1bd-f32eb6a13fc0"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            UnidadeMedidaId = new Guid("3231aeff-289a-4b95-a354-d8fe019e6366")
                        },
                        new
                        {
                            Id = new Guid("cdee2fce-8d9f-4a87-b8e5-aa97983bcee8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9110),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9106),
                            ForaDeUso = false,
                            IngredienteId = new Guid("c24449e8-03f4-423d-a0b4-bffc207021c0"),
                            Nome = "Fermento para Pão",
                            Ordem = 1,
                            Quantidade = 1.0,
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            UnidadeMedidaId = new Guid("3231aeff-289a-4b95-a354-d8fe019e6366")
                        },
                        new
                        {
                            Id = new Guid("028307ab-6407-4c81-aef9-6b35625997c5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9182),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9179),
                            ForaDeUso = false,
                            IngredienteId = new Guid("fff275f4-152f-43e0-bd2c-f3a86be650fc"),
                            Nome = "Ovo de galinha",
                            Ordem = 2,
                            Quantidade = 5.0,
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            UnidadeMedidaId = new Guid("6fa17f5c-dafe-4356-9f36-41b9d36c5990")
                        },
                        new
                        {
                            Id = new Guid("8930c51e-1c63-49bc-b411-14171b98e3f7"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9248),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 785, DateTimeKind.Utc).AddTicks(9246),
                            ForaDeUso = false,
                            IngredienteId = new Guid("42a1cdca-3015-44f3-a1ea-ca6b832b3e38"),
                            Nome = "Água",
                            Ordem = 3,
                            Quantidade = 0.5,
                            ReceitaId = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            UnidadeMedidaId = new Guid("9c9fb002-47ec-4322-92b9-c035fa8d69dd")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d7082cc-3d8d-45d7-bdd3-b1f5170563df"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(8723),
                            CategoriaId = new Guid("62074504-b97e-4b2d-bdf0-bb40265024e5"),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 784, DateTimeKind.Utc).AddTicks(8715),
                            ForaDeUso = false,
                            Nome = "Pão de Forma",
                            RendimentoPorcoes = 5,
                            Sinonimos = "Pão assado,pao assado",
                            TempoPreparoMinutos = 120
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fa17f5c-dafe-4356-9f36-41b9d36c5990"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(2131),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(2122),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidades,unidade(un)",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("e54e8d0f-8f28-4323-a461-7d3fbed89db3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5353),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5345),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("e371b255-a9ed-4983-9df9-c2bbe17ab88e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5463),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5460),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("9c9fb002-47ec-4322-92b9-c035fa8d69dd"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5476),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5474),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("3231aeff-289a-4b95-a354-d8fe019e6366"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5579),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5576),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("adcd900e-5317-45e6-a01b-3b15b560ecc8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5647),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5644),
                            ForaDeUso = false,
                            Nome = "pitada",
                            NomeResumido = "pt",
                            Sinonimos = "pitada,punhadinho,cadinho",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("33a797f5-3c1d-4782-9984-a674a4c638dc"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5750),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5748),
                            ForaDeUso = false,
                            Nome = "colher de sopa",
                            NomeResumido = "cso",
                            Sinonimos = "colher media",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("9b82d705-1e78-4c8d-a639-b53096e70a31"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5804),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5802),
                            ForaDeUso = false,
                            Nome = "fatia",
                            NomeResumido = "fat",
                            Sinonimos = "fatia",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("08d88fcf-ea35-4b33-a870-599f0ce8cf32"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5857),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5855),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidade",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("fc6dca5d-94c7-4a59-85e8-5739e7efa0fb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5701),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5699),
                            ForaDeUso = false,
                            Nome = "colher de chá",
                            NomeResumido = "ccha",
                            Sinonimos = "colher pequena",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("937cb99e-d87f-40df-9009-3b5abecf2d84"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5917),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5915),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("78be9b06-a0e1-47c5-8f40-5c13061eb1f2"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5990),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(5987),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90aab973-14aa-48bd-bc54-441f18d29cdb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 773, DateTimeKind.Utc).AddTicks(6209),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 773, DateTimeKind.Utc).AddTicks(4969),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("c3ba4922-4c86-4bae-be4b-0f036389b0cf"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(280),
                            CriadoEmUtc = new DateTime(2020, 5, 5, 15, 2, 55, 783, DateTimeKind.Utc).AddTicks(242),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Cardapios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Cardapio", "Cardapio")
                        .WithMany("Itens")
                        .HasForeignKey("CardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.ItemCardapio", "ItemCardapio")
                        .WithMany("Receitas")
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
