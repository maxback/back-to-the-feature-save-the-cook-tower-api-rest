// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    [Migration("20200706223920_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_cardapio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 904, DateTimeKind.Utc).AddTicks(1193),
                            CategoriaId = new Guid("2e72a4c2-196f-42f7-a6c4-59f5a2a77c98"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 904, DateTimeKind.Utc).AddTicks(1182),
                            Descricao = "Dieta abase de pão comum",
                            ForaDeUso = false,
                            Nome = "Comendo pão no café da manhã todo dia (mensal)",
                            Sinonimos = "café"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eb4baee-2b56-4b70-8ce2-eb2b84145ac7"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(5715),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(5701),
                            ForaDeUso = false,
                            Nome = "Categorias",
                            Sinonimos = "Categoria Raiz"
                        },
                        new
                        {
                            Id = new Guid("45315cf2-5581-4da4-a70d-e631a347cee7"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(7611),
                            CategoriaPaiId = new Guid("2eb4baee-2b56-4b70-8ce2-eb2b84145ac7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(7593),
                            ForaDeUso = false,
                            Nome = "Ingredientes",
                            Sinonimos = "Categoria Raiz dos Ingredientes"
                        },
                        new
                        {
                            Id = new Guid("071324f2-e468-4b36-89dd-7a8b9052f8fe"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9387),
                            CategoriaPaiId = new Guid("45315cf2-5581-4da4-a70d-e631a347cee7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9376),
                            ForaDeUso = false,
                            Nome = "Carnes",
                            Sinonimos = "carnes"
                        },
                        new
                        {
                            Id = new Guid("b8a9dc26-60a8-4af3-82c0-3ac9f214480a"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9560),
                            CategoriaPaiId = new Guid("45315cf2-5581-4da4-a70d-e631a347cee7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9555),
                            ForaDeUso = false,
                            Nome = "hortifrutigranjeiro",
                            Sinonimos = "hortaliças,frutas,verduras,ovos,hortifruti"
                        },
                        new
                        {
                            Id = new Guid("da67a644-0893-49e4-8710-1c4cfe42fb24"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9669),
                            CategoriaPaiId = new Guid("45315cf2-5581-4da4-a70d-e631a347cee7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9664),
                            ForaDeUso = false,
                            Nome = "geral",
                            Sinonimos = "geral"
                        },
                        new
                        {
                            Id = new Guid("2e72a4c2-196f-42f7-a6c4-59f5a2a77c98"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9793),
                            CategoriaPaiId = new Guid("2eb4baee-2b56-4b70-8ce2-eb2b84145ac7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(9787),
                            ForaDeUso = false,
                            Nome = "Cardápios",
                            Sinonimos = "Categoria Raiz dos Cardápios"
                        },
                        new
                        {
                            Id = new Guid("549691fd-d94f-456f-8e01-53577588ece9"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(60),
                            CategoriaPaiId = new Guid("2eb4baee-2b56-4b70-8ce2-eb2b84145ac7"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(52),
                            ForaDeUso = false,
                            Nome = "Receitas",
                            Sinonimos = "Categoria Raiz das Receitas"
                        },
                        new
                        {
                            Id = new Guid("29547222-af56-4304-8a55-6f913bbe4ed1"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(276),
                            CategoriaPaiId = new Guid("549691fd-d94f-456f-8e01-53577588ece9"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(268),
                            ForaDeUso = false,
                            Nome = "Tortas",
                            Sinonimos = "Categoria Raiz das tortas"
                        },
                        new
                        {
                            Id = new Guid("b80fb7ea-5c38-4e6f-b9ef-703b6116f135"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(300),
                            CategoriaPaiId = new Guid("549691fd-d94f-456f-8e01-53577588ece9"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(297),
                            ForaDeUso = false,
                            Nome = "Café da manhã",
                            Sinonimos = "Cafe da manha"
                        },
                        new
                        {
                            Id = new Guid("4608e318-b1a0-40e1-ab73-920fee434d04"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(488),
                            CategoriaPaiId = new Guid("549691fd-d94f-456f-8e01-53577588ece9"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(482),
                            ForaDeUso = false,
                            Nome = "Jantar",
                            Sinonimos = "Categoria Raiz dos Jantares"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("783d767a-0a65-4e70-9094-de2ebd2fc5e6"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(6929),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(6918),
                            DestinoId = new Guid("3e8a3770-9bbd-4d6a-ba73-2e660e0e5e48"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("4dd24a46-7c2d-4dbe-b269-5f3e3f23214e"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("cc4c9508-52a0-48ce-8699-0a01e907446a"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(4168),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 900, DateTimeKind.Utc).AddTicks(4153),
                            DestinoId = new Guid("6856d677-002f-4f5b-a7d3-f673d810ab23"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Densidade")
                        .HasColumnName("n_densidade")
                        .HasColumnType("float");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaDefaultParaListaIngredientesId")
                        .HasColumnName("id_unidade_medida_default")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadeMedidaParaListaComprasId")
                        .HasColumnName("id_unidade_medida_compras")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UnidadeMedidaDefaultParaListaIngredientesId");

                    b.HasIndex("UnidadeMedidaParaListaComprasId");

                    b.ToTable("ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e9b48af-cb77-4d2d-9c6c-81bdee79afb8"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(1908),
                            CategoriaId = new Guid("da67a644-0893-49e4-8710-1c4cfe42fb24"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(1897),
                            Densidade = 700.0,
                            ForaDeUso = false,
                            Nome = "Farinha de Trigo",
                            Sinonimos = "Trigo",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2"),
                            UnidadeMedidaParaListaComprasId = new Guid("dc30ec49-547e-4f09-ac38-78ea225cb177")
                        },
                        new
                        {
                            Id = new Guid("557d4cc0-0796-4076-9ca2-dc520d0a91df"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(8717),
                            CategoriaId = new Guid("da67a644-0893-49e4-8710-1c4cfe42fb24"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(8697),
                            Densidade = 1000.0,
                            ForaDeUso = false,
                            Nome = "Fermento para Pão",
                            Sinonimos = "Fermento biológico",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2"),
                            UnidadeMedidaParaListaComprasId = new Guid("dc30ec49-547e-4f09-ac38-78ea225cb177")
                        },
                        new
                        {
                            Id = new Guid("1264a549-6fe1-4e2f-b615-09d8f4c13a12"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(8992),
                            CategoriaId = new Guid("b8a9dc26-60a8-4af3-82c0-3ac9f214480a"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(8982),
                            Densidade = 1.0,
                            ForaDeUso = false,
                            Nome = "Ovo de galinha",
                            Sinonimos = "Ovo",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("d4416508-18c0-4f99-ac43-18e522840f70"),
                            UnidadeMedidaParaListaComprasId = new Guid("d4416508-18c0-4f99-ac43-18e522840f70")
                        },
                        new
                        {
                            Id = new Guid("9a34cc26-c983-4b22-8d6f-2cb21f1c56ea"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(9129),
                            CategoriaId = new Guid("da67a644-0893-49e4-8710-1c4cfe42fb24"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 901, DateTimeKind.Utc).AddTicks(9122),
                            Densidade = 1.0,
                            ForaDeUso = false,
                            Nome = "Água",
                            Sinonimos = "Agua",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("6856d677-002f-4f5b-a7d3-f673d810ab23"),
                            UnidadeMedidaParaListaComprasId = new Guid("6856d677-002f-4f5b-a7d3-f673d810ab23")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnName("n_dia_da_semana")
                        .HasColumnType("int");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Porcoes")
                        .HasColumnName("n_porcoes")
                        .HasColumnType("int");

                    b.Property<int>("Semana")
                        .HasColumnName("n_semana")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.ToTable("item_cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2be93c00-16e6-47c0-8011-1af9ddfc6035"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 906, DateTimeKind.Utc).AddTicks(1077),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 906, DateTimeKind.Utc).AddTicks(1049),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("226d164c-42b9-4d20-83c7-201e18afd77d"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 906, DateTimeKind.Utc).AddTicks(9794),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 906, DateTimeKind.Utc).AddTicks(9778),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("3a0fc70c-7693-47bc-8dd0-e2251b160637"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(425),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(417),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("2481ef11-2d44-4c44-9572-6f0dcd680fdf"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(811),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(804),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("cf5b4c40-6571-42a9-8545-bb647b8d112b"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(1177),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(1169),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("df4cc799-1a69-489d-80c6-610faf4a9cac"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(1804),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(1796),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("fb1ae416-358b-45ea-b2c3-d742bf762173"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2191),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2184),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("6aa888e7-d78d-4192-937f-5d5483b44e45"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2562),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2555),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("f418d161-6a86-413c-beb5-1d30f90f3fe7"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2932),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(2925),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("8cf9f417-493d-473f-9e4d-ca0c0dc6c571"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(3351),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(3343),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e08be16a-b32f-47d7-8fe4-775f6164f154"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(3734),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(3727),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("bdc435ab-f511-450a-bff8-b0f824c6977c"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4102),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4095),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1ab03e0d-d8af-4729-bcf2-9aa34b1ad9b8"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4470),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4463),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("a529add5-d8af-4567-873e-6125ced81f2d"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4940),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(4930),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("99285a29-197f-47b5-87df-5e0fab0cd9e1"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(5317),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(5310),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("f021271f-e90f-4edc-a97e-a8594376ec9d"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(5684),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(5677),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("4b4f5cdb-4bcf-48cc-8dd4-15ca660490a4"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6058),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6050),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("ac94df29-83cc-4430-b005-6d340996932a"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6459),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6452),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("b608e54c-3dee-4eda-a49f-357351d1d8f9"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6852),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(6845),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("d8087b48-adee-4c58-aa28-14acdb4fa71a"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(7222),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(7215),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("0c57eef4-3d4c-459a-97d5-b49ba489ba0f"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(7602),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(7595),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("ad3d95d7-08e9-49f5-8f09-1a3205f7f5bf"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(8046),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(8038),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("d16658ea-7a5c-4553-859f-4cd4e369e553"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(8456),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(8448),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c10cc0b7-2d6b-43c3-9484-20a8ffd6c45f"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9033),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9023),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("b563d2fb-17cf-4566-b3f2-e896cace3429"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9478),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9471),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("b22a71f1-1050-4404-9ce7-ffcaef70985b"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9897),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 907, DateTimeKind.Utc).AddTicks(9888),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1deb3ace-753a-4976-8595-51c05dfee6a1"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(248),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(242),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c00c8f3a-5ff5-4962-a107-faea8d85bd8f"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(566),
                            CardapioId = new Guid("a5be3559-fd58-4c28-9229-e9541b2a59e6"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(560),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemCardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("item_cardapio_receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94623fff-9597-4650-945a-de1bd3b9b9b2"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(3126),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(3108),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("2be93c00-16e6-47c0-8011-1af9ddfc6035"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("71ede0f2-5ba5-4e44-bd34-53e465fd2374"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7373),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7358),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("226d164c-42b9-4d20-83c7-201e18afd77d"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("f7f0d0a0-744b-4d73-a432-7768a2f3d60f"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7630),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7621),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("3a0fc70c-7693-47bc-8dd0-e2251b160637"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("cb9118bc-e577-4932-8aa9-b5b8a399332c"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7917),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(7908),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("2481ef11-2d44-4c44-9572-6f0dcd680fdf"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("23b3cefc-b677-4699-8b40-4b4bc2998149"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8057),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8051),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("cf5b4c40-6571-42a9-8545-bb647b8d112b"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("bc8e4706-c309-4cf8-bc89-4b13d7b11782"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8283),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8276),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("df4cc799-1a69-489d-80c6-610faf4a9cac"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("7f45fd2d-1967-44b7-afa5-a59f569e9ccf"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8440),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8434),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("fb1ae416-358b-45ea-b2c3-d742bf762173"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("9543427b-ec88-4419-a4c5-a0702610ee20"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8566),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8558),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("6aa888e7-d78d-4192-937f-5d5483b44e45"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("2c0962fe-fc18-4ce2-b455-c492b8d4c7a2"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8699),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8691),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("f418d161-6a86-413c-beb5-1d30f90f3fe7"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("c4a893a9-7cee-4137-991a-58b991bf3562"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8847),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8840),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("8cf9f417-493d-473f-9e4d-ca0c0dc6c571"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("545e94cc-f07c-4a08-b9a5-142b13ec94f0"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8989),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(8983),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("e08be16a-b32f-47d7-8fe4-775f6164f154"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("30f9ee2f-95c4-4ce5-9957-19501936cf60"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9135),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9129),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("bdc435ab-f511-450a-bff8-b0f824c6977c"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("5eb8f62c-242a-42a0-931a-0f2b1d4762e6"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9271),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9264),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1ab03e0d-d8af-4729-bcf2-9aa34b1ad9b8"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("e1506ea7-d4fc-4414-b7a4-c8160ffa88e3"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9437),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9431),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("a529add5-d8af-4567-873e-6125ced81f2d"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("375a69ec-a6f5-4559-94ee-01f3c572c733"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9672),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9665),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("99285a29-197f-47b5-87df-5e0fab0cd9e1"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("36bc149c-b50b-4256-8607-410663fc3c93"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9811),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9805),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("f021271f-e90f-4edc-a97e-a8594376ec9d"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("d50e7c71-71f7-4c6d-a471-fdc8c959530b"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9945),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 908, DateTimeKind.Utc).AddTicks(9939),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("4b4f5cdb-4bcf-48cc-8dd4-15ca660490a4"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("09759438-9cbf-450f-989c-6a8bc75f374c"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(102),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(96),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("ac94df29-83cc-4430-b005-6d340996932a"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("04104fa3-d97a-4abc-acc1-d0cb465caea5"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(248),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(240),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("b608e54c-3dee-4eda-a49f-357351d1d8f9"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("e26b53cc-6163-4e27-8ec0-9bb3e81a6690"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(380),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(373),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("d8087b48-adee-4c58-aa28-14acdb4fa71a"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("ded43d85-e332-47aa-a945-edd0c1f75ce1"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(513),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(507),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("0c57eef4-3d4c-459a-97d5-b49ba489ba0f"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("e3e59b58-ef13-4095-b216-2edeb7646760"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(663),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(657),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("ad3d95d7-08e9-49f5-8f09-1a3205f7f5bf"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("964fdd70-a1dd-43b5-8f02-aa126bb59631"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(805),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(798),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("d16658ea-7a5c-4553-859f-4cd4e369e553"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("b4464d6c-71b3-43c2-a7e2-ad92462fd17e"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(948),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(941),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c10cc0b7-2d6b-43c3-9484-20a8ffd6c45f"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("4792c028-ec00-4145-b209-ae680e8b88d4"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1087),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1080),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("b563d2fb-17cf-4566-b3f2-e896cace3429"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("c1cd67c3-ba43-4973-bd23-53723e7d312c"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1329),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1323),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("b22a71f1-1050-4404-9ce7-ffcaef70985b"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("e5b9002b-74eb-49ca-9862-0c879ea15c85"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1442),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1435),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1deb3ace-753a-4976-8595-51c05dfee6a1"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        },
                        new
                        {
                            Id = new Guid("b65fc97a-1932-42c6-a670-ff54ae1980b8"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1550),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 909, DateTimeKind.Utc).AddTicks(1545),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c00c8f3a-5ff5-4962-a107-faea8d85bd8f"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86ec42ce-ea76-41e4-95a8-997542f6c008"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(14),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 902, DateTimeKind.Utc).AddTicks(9999),
                            ForaDeUso = false,
                            IngredienteId = new Guid("5e9b48af-cb77-4d2d-9c6c-81bdee79afb8"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            UnidadeMedidaId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2")
                        },
                        new
                        {
                            Id = new Guid("23380c7f-1709-4536-9cff-d98adaa92288"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8335),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8320),
                            ForaDeUso = false,
                            IngredienteId = new Guid("5e9b48af-cb77-4d2d-9c6c-81bdee79afb8"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            UnidadeMedidaId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2")
                        },
                        new
                        {
                            Id = new Guid("d7fe7fda-1a06-44c3-8921-3e01adb63339"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8724),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8717),
                            ForaDeUso = false,
                            IngredienteId = new Guid("557d4cc0-0796-4076-9ca2-dc520d0a91df"),
                            Nome = "Fermento para Pão",
                            Ordem = 1,
                            Quantidade = 1.0,
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            UnidadeMedidaId = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2")
                        },
                        new
                        {
                            Id = new Guid("7cab5f78-7e33-40e6-8bb6-23709c402fbe"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8848),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8842),
                            ForaDeUso = false,
                            IngredienteId = new Guid("1264a549-6fe1-4e2f-b615-09d8f4c13a12"),
                            Nome = "Ovo de galinha",
                            Ordem = 2,
                            Quantidade = 5.0,
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            UnidadeMedidaId = new Guid("d4416508-18c0-4f99-ac43-18e522840f70")
                        },
                        new
                        {
                            Id = new Guid("de8c42be-6b43-42ca-8917-98281baa5ed8"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8978),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 903, DateTimeKind.Utc).AddTicks(8969),
                            ForaDeUso = false,
                            IngredienteId = new Guid("9a34cc26-c983-4b22-8d6f-2cb21f1c56ea"),
                            Nome = "Água",
                            Ordem = 3,
                            Quantidade = 0.5,
                            ReceitaId = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            UnidadeMedidaId = new Guid("6856d677-002f-4f5b-a7d3-f673d810ab23")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1085ed74-dee9-42ad-a41b-77d67dcf7d41"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 902, DateTimeKind.Utc).AddTicks(2006),
                            CategoriaId = new Guid("b80fb7ea-5c38-4e6f-b9ef-703b6116f135"),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 902, DateTimeKind.Utc).AddTicks(1994),
                            ForaDeUso = false,
                            Nome = "Pão de Forma",
                            RendimentoPorcoes = 5,
                            Sinonimos = "Pão assado,pao assado",
                            TempoPreparoMinutos = 120
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4416508-18c0-4f99-ac43-18e522840f70"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 898, DateTimeKind.Utc).AddTicks(8815),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 898, DateTimeKind.Utc).AddTicks(8800),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidades,unidade(un)",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("3358ae34-592b-43f8-be16-704563ec4990"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3532),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3520),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("dc30ec49-547e-4f09-ac38-78ea225cb177"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3633),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3628),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("6856d677-002f-4f5b-a7d3-f673d810ab23"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3754),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(3749),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("11254ba0-ce36-452a-a5b9-b00d7732dda2"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4056),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4048),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("3a7946fd-cb6a-43c1-93b8-aed9e3562524"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4199),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4194),
                            ForaDeUso = false,
                            Nome = "pitada",
                            NomeResumido = "pt",
                            Sinonimos = "pitada,punhadinho,cadinho",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("b0d66063-6c0a-40ee-a329-596f39ec938f"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4417),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4408),
                            ForaDeUso = false,
                            Nome = "colher de sopa",
                            NomeResumido = "cso",
                            Sinonimos = "colher media",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("ee86b6c6-e0d4-43e3-b2c6-02904f9a53be"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4526),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4520),
                            ForaDeUso = false,
                            Nome = "fatia",
                            NomeResumido = "fat",
                            Sinonimos = "fatia",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("008a0916-dd65-453c-aee8-8d578c52cc9d"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4681),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4674),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidade",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("d8fcdc71-ac86-40ac-9fc2-af7d9be76bf1"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4313),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4308),
                            ForaDeUso = false,
                            Nome = "colher de chá",
                            NomeResumido = "ccha",
                            Sinonimos = "colher pequena",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("4dd24a46-7c2d-4dbe-b269-5f3e3f23214e"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4809),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4804),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("3e8a3770-9bbd-4d6a-ba73-2e660e0e5e48"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4919),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 899, DateTimeKind.Utc).AddTicks(4914),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4781971-d6e1-4398-8bad-c51a08ba1bd3"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 880, DateTimeKind.Utc).AddTicks(4850),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 875, DateTimeKind.Utc).AddTicks(8140),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("bac86a82-115d-44be-ae02-ee0d0f3cafcc"),
                            AtualizadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 898, DateTimeKind.Utc).AddTicks(6037),
                            CriadoEmUtc = new DateTime(2020, 7, 6, 22, 39, 18, 898, DateTimeKind.Utc).AddTicks(5986),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Cardapios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedidaDefaultParaListaIngredientes")
                        .WithMany("IngredientesUnidadeDefaultList")
                        .HasForeignKey("UnidadeMedidaDefaultParaListaIngredientesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedidaParaListaCompras")
                        .WithMany("IngredientesUnidadeListCompras")
                        .HasForeignKey("UnidadeMedidaParaListaComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Cardapio", "Cardapio")
                        .WithMany("Itens")
                        .HasForeignKey("CardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.ItemCardapio", "ItemCardapio")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
