// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    partial class SaveTheCookTowerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f1da101-6a3f-426c-8af6-8fc762037b4e"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(1548),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(1540),
                            DestinoId = new Guid("bd55f7d9-6fd5-42f3-a9b2-dc4075a5d050"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("8264cadc-84ac-4d10-86f1-a6d97a76bcee"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("68bf6e23-a6ad-4688-b535-2f91eb8d3c38"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(6102),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(6094),
                            DestinoId = new Guid("afc884e4-4d8c-46f7-8c86-481db5f2808d"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("7bb61175-c019-4f8a-8f9f-4a431a065ed5"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ingrediente");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ac7a168-bd0f-4b2c-b804-2fa3505f3df7"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 544, DateTimeKind.Utc).AddTicks(6865),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 544, DateTimeKind.Utc).AddTicks(6855),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("c71cbb3f-fd40-4d4c-a870-c8566d3c9cb3"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(114),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(106),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("afc884e4-4d8c-46f7-8c86-481db5f2808d"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(218),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(216),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("7bb61175-c019-4f8a-8f9f-4a431a065ed5"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(303),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(300),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("8264cadc-84ac-4d10-86f1-a6d97a76bcee"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(366),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(363),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("bd55f7d9-6fd5-42f3-a9b2-dc4075a5d050"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(435),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 545, DateTimeKind.Utc).AddTicks(432),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64c3f76a-26df-41b5-8c04-0d57ea4164ed"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 534, DateTimeKind.Utc).AddTicks(3787),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 534, DateTimeKind.Utc).AddTicks(2550),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("09eac9e8-9274-4fe1-b621-a23da0b29e23"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 544, DateTimeKind.Utc).AddTicks(4773),
                            CriadoEmUtc = new DateTime(2020, 4, 12, 20, 8, 31, 544, DateTimeKind.Utc).AddTicks(4737),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
