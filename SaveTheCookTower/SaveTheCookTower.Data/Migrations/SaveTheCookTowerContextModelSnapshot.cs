// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    partial class SaveTheCookTowerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80d70986-379f-4075-bcce-3384ff191f39"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(7131),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(7121),
                            ForaDeUso = false,
                            Nome = "Categorias",
                            Sinonimos = "Categoria Raiz"
                        },
                        new
                        {
                            Id = new Guid("99302cab-7501-4ac6-94ef-a738a1edbc31"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(9043),
                            CategoriaPaiId = new Guid("80d70986-379f-4075-bcce-3384ff191f39"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(9030),
                            ForaDeUso = false,
                            Nome = "Ingredientes",
                            Sinonimos = "Categoria Raiz dos Ingredientes"
                        },
                        new
                        {
                            Id = new Guid("54be2e31-e394-4dc8-a5ef-a12d13bc623b"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(876),
                            CategoriaPaiId = new Guid("80d70986-379f-4075-bcce-3384ff191f39"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(865),
                            ForaDeUso = false,
                            Nome = "Receitas",
                            Sinonimos = "Categoria Raiz das Receitas"
                        },
                        new
                        {
                            Id = new Guid("16978972-b5be-40ae-ba64-3a397de420e2"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1116),
                            CategoriaPaiId = new Guid("54be2e31-e394-4dc8-a5ef-a12d13bc623b"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1109),
                            ForaDeUso = false,
                            Nome = "Tortas",
                            Sinonimos = "Categoria Raiz das tortas"
                        },
                        new
                        {
                            Id = new Guid("433e8455-4724-4e30-bedd-7ae9c8ce50c1"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1138),
                            CategoriaPaiId = new Guid("54be2e31-e394-4dc8-a5ef-a12d13bc623b"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1135),
                            ForaDeUso = false,
                            Nome = "Café da manhã",
                            Sinonimos = "Cafe da manha"
                        },
                        new
                        {
                            Id = new Guid("d4b68030-acfb-4132-b4a9-21ae2ad692a6"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1319),
                            CategoriaPaiId = new Guid("54be2e31-e394-4dc8-a5ef-a12d13bc623b"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(1315),
                            ForaDeUso = false,
                            Nome = "Jantar",
                            Sinonimos = "Categoria Raiz dos Jantares"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e4a0fa3-e450-444b-9fdb-0b4745f7f689"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(8271),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(8260),
                            DestinoId = new Guid("b6a495ab-d3ed-4086-8c56-3a78767fbdb4"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("7f4bd4f8-e2dd-4829-948f-23e4126f9a87"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("f86cd186-ef27-4bb4-9e08-b4eba89b4f27"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(5667),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 879, DateTimeKind.Utc).AddTicks(5645),
                            DestinoId = new Guid("0842234b-4cd9-4b3a-bd08-886daff27f16"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("ee21c099-374f-41db-92b1-54c73ac80ecf"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9ff59b2-ed86-411c-846a-ef146263e9cd"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(2503),
                            CategoriaId = new Guid("99302cab-7501-4ac6-94ef-a738a1edbc31"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(2492),
                            ForaDeUso = false,
                            Nome = "Farinha de Trigo",
                            Sinonimos = "Trigo"
                        },
                        new
                        {
                            Id = new Guid("c06746fd-cb4b-4405-8a1d-a367fc4df506"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(3968),
                            CategoriaId = new Guid("99302cab-7501-4ac6-94ef-a738a1edbc31"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(3959),
                            ForaDeUso = false,
                            Nome = "Fermento para Pão",
                            Sinonimos = "Fermento biológico"
                        },
                        new
                        {
                            Id = new Guid("1c43a6c1-f1d6-4860-b654-3a9c972361f8"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(4090),
                            CategoriaId = new Guid("99302cab-7501-4ac6-94ef-a738a1edbc31"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(4086),
                            ForaDeUso = false,
                            Nome = "Ovo de galinha",
                            Sinonimos = "Ovo"
                        },
                        new
                        {
                            Id = new Guid("ad8e82d2-84a1-4bca-8b11-29ff87034636"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(4164),
                            CategoriaId = new Guid("99302cab-7501-4ac6-94ef-a738a1edbc31"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(4161),
                            ForaDeUso = false,
                            Nome = "Água",
                            Sinonimos = "Agua"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e6e5a5b-8c66-4fc3-82c9-69205ba957e6"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(2470),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(2457),
                            ForaDeUso = false,
                            IngredienteId = new Guid("a9ff59b2-ed86-411c-846a-ef146263e9cd"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            UnidadeMedidaId = new Guid("ee21c099-374f-41db-92b1-54c73ac80ecf")
                        },
                        new
                        {
                            Id = new Guid("2c649115-d4f2-4ea7-9c1e-8d47506b4a15"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8335),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8324),
                            ForaDeUso = false,
                            IngredienteId = new Guid("a9ff59b2-ed86-411c-846a-ef146263e9cd"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            UnidadeMedidaId = new Guid("ee21c099-374f-41db-92b1-54c73ac80ecf")
                        },
                        new
                        {
                            Id = new Guid("5703b3b6-7948-4811-b314-0adad8f0ffec"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8531),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8526),
                            ForaDeUso = false,
                            IngredienteId = new Guid("c06746fd-cb4b-4405-8a1d-a367fc4df506"),
                            Nome = "Fermento para Pão",
                            Ordem = 1,
                            Quantidade = 1.0,
                            ReceitaId = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            UnidadeMedidaId = new Guid("ee21c099-374f-41db-92b1-54c73ac80ecf")
                        },
                        new
                        {
                            Id = new Guid("620808ef-ee31-4747-8b41-df2fb1d1145c"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8607),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8603),
                            ForaDeUso = false,
                            IngredienteId = new Guid("1c43a6c1-f1d6-4860-b654-3a9c972361f8"),
                            Nome = "Ovo de galinha",
                            Ordem = 2,
                            Quantidade = 5.0,
                            ReceitaId = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            UnidadeMedidaId = new Guid("16029883-a148-4cf7-970f-8a276daf5fe5")
                        },
                        new
                        {
                            Id = new Guid("469b1a76-8a82-4761-939f-53db9317e70f"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8676),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 881, DateTimeKind.Utc).AddTicks(8673),
                            ForaDeUso = false,
                            IngredienteId = new Guid("ad8e82d2-84a1-4bca-8b11-29ff87034636"),
                            Nome = "Água",
                            Ordem = 3,
                            Quantidade = 0.5,
                            ReceitaId = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            UnidadeMedidaId = new Guid("0842234b-4cd9-4b3a-bd08-886daff27f16")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cbc0ee5-be06-4e78-b094-70e9f21b55a2"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(5198),
                            CategoriaId = new Guid("433e8455-4724-4e30-bedd-7ae9c8ce50c1"),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 880, DateTimeKind.Utc).AddTicks(5189),
                            ForaDeUso = false,
                            Nome = "Pão de Forma",
                            RendimentoPorcoes = 5,
                            Sinonimos = "Pão assado",
                            TempoPreparoMinutos = 120
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16029883-a148-4cf7-970f-8a276daf5fe5"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 877, DateTimeKind.Utc).AddTicks(7955),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 877, DateTimeKind.Utc).AddTicks(7944),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidades,unidade(un)",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("52895e0c-c100-433b-9357-6571433ca979"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(5872),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(5848),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("215fdea2-3fdc-484f-a4a6-3d751f6375a2"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6096),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6090),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("0842234b-4cd9-4b3a-bd08-886daff27f16"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6119),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6116),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("ee21c099-374f-41db-92b1-54c73ac80ecf"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6233),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6228),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("7f4bd4f8-e2dd-4829-948f-23e4126f9a87"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6416),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6411),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("b6a495ab-d3ed-4086-8c56-3a78767fbdb4"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6531),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 878, DateTimeKind.Utc).AddTicks(6526),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c71f5695-1eaa-4659-8b26-e7635ec820c1"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 866, DateTimeKind.Utc).AddTicks(5839),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 866, DateTimeKind.Utc).AddTicks(4174),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("f232ec53-810e-4465-91b6-ddf0efd5ad5b"),
                            AtualizadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 877, DateTimeKind.Utc).AddTicks(5741),
                            CriadoEmUtc = new DateTime(2020, 4, 15, 5, 2, 23, 877, DateTimeKind.Utc).AddTicks(5700),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
