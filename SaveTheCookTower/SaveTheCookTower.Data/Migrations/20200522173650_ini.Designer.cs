// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveTheCookTower.Data.Context;

namespace SaveTheCookTower.Data.Migrations
{
    [DbContext(typeof(SaveTheCookTowerContext))]
    [Migration("20200522173650_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvaliacaoMedia")
                        .HasColumnName("b_eh_aval_media")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantidadeEstrelas")
                        .HasColumnName("qtd_estrelas")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceitaDeQuemEhAvaliacaoMediaId")
                        .HasColumnName("id_receita_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("id_usuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaDeQuemEhAvaliacaoMediaId")
                        .IsUnique()
                        .HasFilter("[id_receita_media] IS NOT NULL");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("avaliacao_usuario");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_cardapio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(7270),
                            CategoriaId = new Guid("0a43169e-7b51-4e2f-8c78-5405aff21ae1"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(7260),
                            Descricao = "Dieta abase de pão comum",
                            ForaDeUso = false,
                            Nome = "Comendo pão no café da manhã todo dia (mensal)",
                            Sinonimos = "café"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaPaiId")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("categoria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb16b590-83ee-472b-a7ba-b33d30a36cd5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(895),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(884),
                            ForaDeUso = false,
                            Nome = "Categorias",
                            Sinonimos = "Categoria Raiz"
                        },
                        new
                        {
                            Id = new Guid("3741c81c-85f8-4ad1-be11-c5bbbf852ee0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(2808),
                            CategoriaPaiId = new Guid("eb16b590-83ee-472b-a7ba-b33d30a36cd5"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(2797),
                            ForaDeUso = false,
                            Nome = "Ingredientes",
                            Sinonimos = "Categoria Raiz dos Ingredientes"
                        },
                        new
                        {
                            Id = new Guid("913ec87d-b284-482e-b7bb-ecb13909bc4c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4520),
                            CategoriaPaiId = new Guid("3741c81c-85f8-4ad1-be11-c5bbbf852ee0"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4508),
                            ForaDeUso = false,
                            Nome = "Carnes",
                            Sinonimos = "carnes"
                        },
                        new
                        {
                            Id = new Guid("c9a311c1-5649-43fb-81d0-be3e0d99a5eb"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4709),
                            CategoriaPaiId = new Guid("3741c81c-85f8-4ad1-be11-c5bbbf852ee0"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4702),
                            ForaDeUso = false,
                            Nome = "hortifrutigranjeiro",
                            Sinonimos = "hortaliças,frutas,verduras,ovos,hortifruti"
                        },
                        new
                        {
                            Id = new Guid("a84e2540-aa92-4053-98cf-9f02d2795287"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4837),
                            CategoriaPaiId = new Guid("3741c81c-85f8-4ad1-be11-c5bbbf852ee0"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4830),
                            ForaDeUso = false,
                            Nome = "geral",
                            Sinonimos = "geral"
                        },
                        new
                        {
                            Id = new Guid("0a43169e-7b51-4e2f-8c78-5405aff21ae1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4971),
                            CategoriaPaiId = new Guid("eb16b590-83ee-472b-a7ba-b33d30a36cd5"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(4965),
                            ForaDeUso = false,
                            Nome = "Cardápios",
                            Sinonimos = "Categoria Raiz dos Cardápios"
                        },
                        new
                        {
                            Id = new Guid("491970f8-e8f6-46a5-b04c-e3d7b6748f1e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5090),
                            CategoriaPaiId = new Guid("eb16b590-83ee-472b-a7ba-b33d30a36cd5"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5084),
                            ForaDeUso = false,
                            Nome = "Receitas",
                            Sinonimos = "Categoria Raiz das Receitas"
                        },
                        new
                        {
                            Id = new Guid("7a604a08-0afe-4cdf-bc4e-8ab774a6845e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5316),
                            CategoriaPaiId = new Guid("491970f8-e8f6-46a5-b04c-e3d7b6748f1e"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5310),
                            ForaDeUso = false,
                            Nome = "Tortas",
                            Sinonimos = "Categoria Raiz das tortas"
                        },
                        new
                        {
                            Id = new Guid("e6edeaf6-b0c7-41d2-b1a5-f494ae491c5d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5344),
                            CategoriaPaiId = new Guid("491970f8-e8f6-46a5-b04c-e3d7b6748f1e"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5340),
                            ForaDeUso = false,
                            Nome = "Café da manhã",
                            Sinonimos = "Cafe da manha"
                        },
                        new
                        {
                            Id = new Guid("e8140b18-0758-4c47-9b46-9f9d92d71982"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5553),
                            CategoriaPaiId = new Guid("491970f8-e8f6-46a5-b04c-e3d7b6748f1e"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(5546),
                            ForaDeUso = false,
                            Nome = "Jantar",
                            Sinonimos = "Categoria Raiz dos Jantares"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnName("id_unidade_dest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrigemId")
                        .HasColumnName("id_unidade_orig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RazaoOrigemDestino")
                        .HasColumnName("nu_razao_orig_dest")
                        .HasColumnType("float");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.ToTable("unidade_medida_equiv");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b877a3d0-e823-4314-89b8-f6edd4a64624"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(7348),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(7334),
                            DestinoId = new Guid("e4bb9405-db2e-4007-a7d6-b5d0dd24d0a7"),
                            ForaDeUso = false,
                            Nome = "metro para milimetros",
                            OrigemId = new Guid("15248aae-5d15-441c-a9f4-df13809ad4f9"),
                            RazaoOrigemDestino = 0.001,
                            Sinonimos = "razão m/ml, metro para milimetros,m para ml"
                        },
                        new
                        {
                            Id = new Guid("41b47db4-9b9f-4579-9d53-4a80204e6ca3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 392, DateTimeKind.Utc).AddTicks(9236),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 392, DateTimeKind.Utc).AddTicks(9210),
                            DestinoId = new Guid("b7d0d1bf-1e55-4cb6-ba21-9ea9d5425d44"),
                            ForaDeUso = false,
                            Nome = "xícaras de chá pra litros",
                            OrigemId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888"),
                            RazaoOrigemDestino = 0.25,
                            Sinonimos = "razão xíc/l, xícara de chá apra litros,xíc para l,xic para l"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("m_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("etapa_preparo");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcessoEmUtc")
                        .HasColumnName("dt_acesso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autor")
                        .HasColumnName("s_autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnName("m_comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EdicaoDoLivro")
                        .HasColumnName("s_edicao_livro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigemUri")
                        .HasColumnName("uri_origem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaginaDoLivro")
                        .HasColumnName("n_pagina_livro")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnName("s_titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fonte_prop_intelec");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("info_nutricional");
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Densidade")
                        .HasColumnName("n_densidade")
                        .HasColumnType("float");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaDefaultParaListaIngredientesId")
                        .HasColumnName("id_unidade_medida_default")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadeMedidaParaListaComprasId")
                        .HasColumnName("id_unidade_medida_compras")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UnidadeMedidaDefaultParaListaIngredientesId");

                    b.HasIndex("UnidadeMedidaParaListaComprasId");

                    b.ToTable("ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc5a1909-341a-40e4-b3dc-d1ca07e67059"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(6874),
                            CategoriaId = new Guid("a84e2540-aa92-4053-98cf-9f02d2795287"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 393, DateTimeKind.Utc).AddTicks(6863),
                            Densidade = 700.0,
                            ForaDeUso = false,
                            Nome = "Farinha de Trigo",
                            Sinonimos = "Trigo",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888"),
                            UnidadeMedidaParaListaComprasId = new Guid("e54fb3fb-7d81-4f5d-ad6d-4d4852277c0c")
                        },
                        new
                        {
                            Id = new Guid("a7c71c26-0d29-42c2-8e1b-76e23f3e9ef1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(3754),
                            CategoriaId = new Guid("a84e2540-aa92-4053-98cf-9f02d2795287"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(3724),
                            Densidade = 1000.0,
                            ForaDeUso = false,
                            Nome = "Fermento para Pão",
                            Sinonimos = "Fermento biológico",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888"),
                            UnidadeMedidaParaListaComprasId = new Guid("e54fb3fb-7d81-4f5d-ad6d-4d4852277c0c")
                        },
                        new
                        {
                            Id = new Guid("4cc1267d-52f3-4206-ba0b-0306fd609288"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(4044),
                            CategoriaId = new Guid("c9a311c1-5649-43fb-81d0-be3e0d99a5eb"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(4037),
                            Densidade = 1.0,
                            ForaDeUso = false,
                            Nome = "Ovo de galinha",
                            Sinonimos = "Ovo",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("4296699a-4370-4070-8e75-ddd37c8cc0d8"),
                            UnidadeMedidaParaListaComprasId = new Guid("4296699a-4370-4070-8e75-ddd37c8cc0d8")
                        },
                        new
                        {
                            Id = new Guid("fb59ec23-8409-4bae-ad0e-319631947287"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(4165),
                            CategoriaId = new Guid("a84e2540-aa92-4053-98cf-9f02d2795287"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(4159),
                            Densidade = 1.0,
                            ForaDeUso = false,
                            Nome = "Água",
                            Sinonimos = "Agua",
                            UnidadeMedidaDefaultParaListaIngredientesId = new Guid("b7d0d1bf-1e55-4cb6-ba21-9ea9d5425d44"),
                            UnidadeMedidaParaListaComprasId = new Guid("b7d0d1bf-1e55-4cb6-ba21-9ea9d5425d44")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnName("n_dia_da_semana")
                        .HasColumnType("int");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Porcoes")
                        .HasColumnName("n_porcoes")
                        .HasColumnType("int");

                    b.Property<int>("Semana")
                        .HasColumnName("n_semana")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.ToTable("item_cardapio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a29fe26-41c4-4ed3-a399-20e6b6a5a912"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 401, DateTimeKind.Utc).AddTicks(6581),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 401, DateTimeKind.Utc).AddTicks(6554),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("7e7955d5-9861-4ae1-afc4-35b6ea3a3e6a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(4793),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(4774),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("9a65d2d5-969e-42f7-b0cd-581c05f621a3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(5375),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(5364),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("9cad21aa-0e6d-4f11-9562-45e557e4d7d2"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(5773),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(5763),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c7ee1de6-eea4-47e8-a741-9067a7a424c9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6164),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6152),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("bd3471b6-95c4-4d96-9a2f-84e58513f94c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6558),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6550),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1bdc7d55-430e-4aed-a6c4-ef01182ab17a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6894),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(6888),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 1a semana ",
                            Porcoes = 1,
                            Semana = 1,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("14037ff7-8eb1-4d40-90f8-17d221b71ba5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7237),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7230),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("c2e4b2fd-4ac8-46e7-86b6-be7910c39525"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7561),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7552),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("a4124323-d5e9-4c20-8208-4f9ded9a3df7"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7948),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(7939),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("2754dad9-322a-4b7b-97d0-c6593ea2b2a5"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(8339),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(8330),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1f0afa28-e22a-4aac-b2a4-dabd85d811bd"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(8699),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(8692),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("abe38d84-9d2a-415d-87f1-072f8da106f9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9014),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9007),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("0e1763d8-1e3a-49e7-9b47-4dd12f01aff0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9312),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9306),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 2a semana ",
                            Porcoes = 1,
                            Semana = 2,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("fbce18bb-52bb-42aa-9473-c65f1cda3c41"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9618),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9611),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("93f2f5bf-7ed3-4130-9d1f-bb53dd47e22d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9928),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 402, DateTimeKind.Utc).AddTicks(9921),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("0e62835f-1f06-4045-a4d9-7aec852773a0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(233),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(226),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("f78a348c-6979-40a9-bfd1-76ac2690f37e"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(553),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(546),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("4771f933-2132-4fd9-a1a4-a14d82864b95"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1028),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1019),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("658dd4cd-77b4-4ff6-a042-9ff1ca063537"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1412),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1405),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("af041e7b-dad9-491f-ba06-010a2bac55b6"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1744),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(1737),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 3a semana ",
                            Porcoes = 1,
                            Semana = 3,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("a7c6dd35-0ed7-40f9-a1be-df6da815b6ed"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2052),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2045),
                            DiaDaSemana = 1,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Domingo da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("1acde7f7-2cc4-4f54-b11e-6c8842610188"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2350),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2343),
                            DiaDaSemana = 2,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Segunda-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("25981828-2415-4640-babf-3fb50b70d6c7"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2663),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2656),
                            DiaDaSemana = 3,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Terça-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("da136b89-1752-46b1-895c-b49de8ee184b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(3008),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(2999),
                            DiaDaSemana = 4,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quarta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("632f5b6e-e61a-4613-8471-bd8c76672e28"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(3430),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(3420),
                            DiaDaSemana = 5,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Quinta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("51a1151f-1b4c-4b34-994c-b4647bc79b59"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(3773),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(3766),
                            DiaDaSemana = 6,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sexta-feira da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("afb7fa4c-213e-4f3a-b373-d82b711f9ec3"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(4126),
                            CardapioId = new Guid("01df412d-62b6-4109-862c-9f90994d9737"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(4118),
                            DiaDaSemana = 7,
                            ForaDeUso = false,
                            Nome = "Café da Manhã, Sábado da 4a semana ",
                            Porcoes = 1,
                            Semana = 4,
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemCardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("item_cardapio_receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("002decfc-dd6e-4e5d-aef1-ece657bcda89"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(6252),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(6240),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("8a29fe26-41c4-4ed3-a399-20e6b6a5a912"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("5da149c6-34a2-4b84-acf8-94e52b2b0f77"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(9841),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 403, DateTimeKind.Utc).AddTicks(9829),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("7e7955d5-9861-4ae1-afc4-35b6ea3a3e6a"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("bd3fd8cc-160a-4e6f-9f96-24634e92affc"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(44),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(37),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("9a65d2d5-969e-42f7-b0cd-581c05f621a3"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("46f93e8b-a2f9-45a4-9af0-fb223eb88b87"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(158),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(153),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("9cad21aa-0e6d-4f11-9562-45e557e4d7d2"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("ababac77-e0cb-4b5a-8758-c6555efdbcf8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(266),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(262),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c7ee1de6-eea4-47e8-a741-9067a7a424c9"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("bf68f277-d7f5-4f38-a174-eabdc38ab7c0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(399),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(392),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("bd3471b6-95c4-4d96-9a2f-84e58513f94c"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("4d614a36-2628-4919-8b00-dfb67557e501"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(522),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(516),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1bdc7d55-430e-4aed-a6c4-ef01182ab17a"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 1a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("3a65a1ab-9d42-4cf6-b1a4-001f3813c81f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(687),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(679),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("14037ff7-8eb1-4d40-90f8-17d221b71ba5"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("b797941a-3f48-43ae-9e6b-dd7db7a98012"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(832),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(826),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("c2e4b2fd-4ac8-46e7-86b6-be7910c39525"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("097bf9ee-ff08-439e-93bb-82dc60c7bc2c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(993),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(986),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("a4124323-d5e9-4c20-8208-4f9ded9a3df7"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("e3032fbd-f058-4670-89dd-d31e1ed2928a"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1109),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1103),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("2754dad9-322a-4b7b-97d0-c6593ea2b2a5"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("7bc30a4c-fff5-43f8-91a9-b164f5d7bc5f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1228),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1222),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1f0afa28-e22a-4aac-b2a4-dabd85d811bd"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("1dd33353-df1d-4439-be24-6d791cabc877"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1341),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1336),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("abe38d84-9d2a-415d-87f1-072f8da106f9"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("f7cb9393-be4a-43ee-94e8-003cb9d10b9d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1447),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1443),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("0e1763d8-1e3a-49e7-9b47-4dd12f01aff0"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 2a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("7fedf460-239a-4bd8-9e20-e1f7d53d568f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1558),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1553),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("fbce18bb-52bb-42aa-9473-c65f1cda3c41"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("71cee9cb-94d4-42ee-82f8-91d57d68639c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1714),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1709),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("93f2f5bf-7ed3-4130-9d1f-bb53dd47e22d"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("76d535c3-b64e-42d6-a54f-39436ea0a52c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1827),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1822),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("0e62835f-1f06-4045-a4d9-7aec852773a0"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("13b26730-2ea1-4043-a33e-ad585dbe2133"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1946),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(1941),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("f78a348c-6979-40a9-bfd1-76ac2690f37e"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("c7360935-bbda-4e06-b03e-3393f0285e8d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2054),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2049),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("4771f933-2132-4fd9-a1a4-a14d82864b95"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("33315b61-b3eb-481a-b961-647f16ced050"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2178),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2172),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("658dd4cd-77b4-4ff6-a042-9ff1ca063537"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("b5f1a667-cc35-4237-8806-2058a462511d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2307),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2301),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("af041e7b-dad9-491f-ba06-010a2bac55b6"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 3a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("bef4af14-0e8b-4cb1-92f8-ef7ca61570a7"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2438),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2431),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("a7c6dd35-0ed7-40f9-a1be-df6da815b6ed"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Domingo da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("bbcc032d-c282-4994-b602-e721ef6f240f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2562),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2556),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("1acde7f7-2cc4-4f54-b11e-6c8842610188"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Segunda-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("03932de1-9084-40a5-97c9-818bb6cd99cc"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2711),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2706),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("25981828-2415-4640-babf-3fb50b70d6c7"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Terça-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("d72ac824-96f0-4c7f-b66d-07e38aa02781"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2826),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2820),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("da136b89-1752-46b1-895c-b49de8ee184b"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quarta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("5dd208a6-21ce-4cb4-b42f-12236e894a3f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2940),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(2935),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("632f5b6e-e61a-4613-8471-bd8c76672e28"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Quinta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("d7463bce-6795-4636-86d3-7e9f70719bde"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(3080),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(3074),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("51a1151f-1b4c-4b34-994c-b4647bc79b59"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sexta-feira da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        },
                        new
                        {
                            Id = new Guid("cf3a2be0-3321-4e58-9c64-d32ac208d700"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(3188),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 404, DateTimeKind.Utc).AddTicks(3183),
                            ForaDeUso = false,
                            ItemCardapioId = new Guid("afb7fa4c-213e-4f3a-b373-d82b711f9ec3"),
                            Nome = "Rel. Item Cardápio(Café da Manhã, Sábado da 4a semana ) x Receita(Pão de Forma)",
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnName("id_ingrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnName("n_ordem")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnName("n_quantidade")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnName("id_receia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadeMedidaId")
                        .HasColumnName("id_unidade_medida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("item_lista_ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2479c46-0ae1-4b64-bbe4-4194e8d4aba1"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 397, DateTimeKind.Utc).AddTicks(4959),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 397, DateTimeKind.Utc).AddTicks(4933),
                            ForaDeUso = false,
                            IngredienteId = new Guid("dc5a1909-341a-40e4-b3dc-d1ca07e67059"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            UnidadeMedidaId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888")
                        },
                        new
                        {
                            Id = new Guid("147e21fe-9aaf-4b17-a751-49b656e8b292"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4304),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4276),
                            ForaDeUso = false,
                            IngredienteId = new Guid("dc5a1909-341a-40e4-b3dc-d1ca07e67059"),
                            Nome = "Farinha de Trigo",
                            Ordem = 0,
                            Quantidade = 3.0,
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            UnidadeMedidaId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888")
                        },
                        new
                        {
                            Id = new Guid("16846250-57a5-4c72-bb06-3e25924f8653"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4686),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4678),
                            ForaDeUso = false,
                            IngredienteId = new Guid("a7c71c26-0d29-42c2-8e1b-76e23f3e9ef1"),
                            Nome = "Fermento para Pão",
                            Ordem = 1,
                            Quantidade = 1.0,
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            UnidadeMedidaId = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888")
                        },
                        new
                        {
                            Id = new Guid("a16d57dd-e80a-4549-9269-7f5f4ae858a0"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4815),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4808),
                            ForaDeUso = false,
                            IngredienteId = new Guid("4cc1267d-52f3-4206-ba0b-0306fd609288"),
                            Nome = "Ovo de galinha",
                            Ordem = 2,
                            Quantidade = 5.0,
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            UnidadeMedidaId = new Guid("4296699a-4370-4070-8e75-ddd37c8cc0d8")
                        },
                        new
                        {
                            Id = new Guid("c93d24c5-24dd-4b70-bbbb-83ff2563cd81"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4935),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 399, DateTimeKind.Utc).AddTicks(4930),
                            ForaDeUso = false,
                            IngredienteId = new Guid("fb59ec23-8409-4bae-ad0e-319631947287"),
                            Nome = "Água",
                            Ordem = 3,
                            Quantidade = 0.5,
                            ReceitaId = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            UnidadeMedidaId = new Guid("b7d0d1bf-1e55-4cb6-ba21-9ea9d5425d44")
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvaliacaoMediaId")
                        .HasColumnName("id_avaliacao_media")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnName("id_categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FonteId")
                        .HasColumnName("id_fonte")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ImagensUri")
                        .HasColumnName("m_imagens_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceitaPaiId")
                        .HasColumnName("id_receita_pai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RendimentoPorcoes")
                        .HasColumnName("n_redimento_porcoes")
                        .HasColumnType("int");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TempoPreparoMinutos")
                        .HasColumnName("n_tempo_preparo_minutos")
                        .HasColumnType("int");

                    b.Property<string>("VideosUri")
                        .HasColumnName("m_videos_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FonteId");

                    b.HasIndex("ReceitaPaiId");

                    b.ToTable("receita");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b16d8585-091a-484d-aac9-02fb25038f9b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(6751),
                            CategoriaId = new Guid("e6edeaf6-b0c7-41d2-b1a5-f494ae491c5d"),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 396, DateTimeKind.Utc).AddTicks(6736),
                            ForaDeUso = false,
                            Nome = "Pão de Forma",
                            RendimentoPorcoes = 5,
                            Sinonimos = "Pão assado,pao assado",
                            TempoPreparoMinutos = 120
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeResumido")
                        .HasColumnName("_nome_resumido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnName("n_tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("unidade_medida");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4296699a-4370-4070-8e75-ddd37c8cc0d8"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 390, DateTimeKind.Utc).AddTicks(8653),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 390, DateTimeKind.Utc).AddTicks(8640),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidades,unidade(un)",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("44b76a8a-9897-457c-91f0-0037e92d114f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3404),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3390),
                            ForaDeUso = false,
                            Nome = "grama",
                            NomeResumido = "g",
                            Sinonimos = "gramas,grama(g)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("e54fb3fb-7d81-4f5d-ad6d-4d4852277c0c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3509),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3504),
                            ForaDeUso = false,
                            Nome = "kilograma",
                            NomeResumido = "kg",
                            Sinonimos = "kilo,kilos,kilo gramas,kilogramas,kilograma(kg)",
                            Tipo = 3
                        },
                        new
                        {
                            Id = new Guid("b7d0d1bf-1e55-4cb6-ba21-9ea9d5425d44"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3653),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3647),
                            ForaDeUso = false,
                            Nome = "litro",
                            NomeResumido = "l",
                            Sinonimos = "litros,litro(l)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("7d05ae5f-4b7e-433b-989c-dbe5c895d888"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3826),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3819),
                            ForaDeUso = false,
                            Nome = "xícara de chá",
                            NomeResumido = "xíc",
                            Sinonimos = "xic,cicara de cha, xícara chá, xícaras de chá,xícara(chá)",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("0561f494-fbdc-417a-994c-8575fe591f46"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3975),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(3969),
                            ForaDeUso = false,
                            Nome = "pitada",
                            NomeResumido = "pt",
                            Sinonimos = "pitada,punhadinho,cadinho",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("765f0b3c-9afc-445a-8229-ba4dea18814c"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4200),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4194),
                            ForaDeUso = false,
                            Nome = "colher de sopa",
                            NomeResumido = "cso",
                            Sinonimos = "colher media",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("d1b0b9d9-156d-4d56-bc1c-a6b7411c388b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4326),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4320),
                            ForaDeUso = false,
                            Nome = "fatia",
                            NomeResumido = "fat",
                            Sinonimos = "fatia",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("c93111f3-8a18-4140-8f64-aa408235b22d"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4448),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4441),
                            ForaDeUso = false,
                            Nome = "unidade",
                            NomeResumido = "un",
                            Sinonimos = "unidade",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("bbf5b668-695e-40b6-9704-fe1be0b856ca"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4095),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4089),
                            ForaDeUso = false,
                            Nome = "colher de chá",
                            NomeResumido = "ccha",
                            Sinonimos = "colher pequena",
                            Tipo = 4
                        },
                        new
                        {
                            Id = new Guid("15248aae-5d15-441c-a9f4-df13809ad4f9"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4639),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4632),
                            ForaDeUso = false,
                            Nome = "metro",
                            NomeResumido = "m",
                            Sinonimos = "metros,metro(m)",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("e4bb9405-db2e-4007-a7d6-b5d0dd24d0a7"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4754),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 391, DateTimeKind.Utc).AddTicks(4749),
                            ForaDeUso = false,
                            Nome = "milimetro",
                            NomeResumido = "mm",
                            Sinonimos = "milimetros,milimetro(ml)",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AtualizadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AtualizadoPorId")
                        .HasColumnName("id_Usu_atualizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CriadoEmUtc")
                        .IsRequired()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CriadoPorId")
                        .HasColumnName("id_usu_criacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnName("s_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForaDeUso")
                        .HasColumnName("b_fora_uso")
                        .HasColumnType("bit");

                    b.Property<string>("ItemUri")
                        .HasColumnName("s_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnName("s_login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("s_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("s_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinonimos")
                        .HasColumnName("m_sinonimos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("s_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43945158-f499-469f-9fc4-529fd0d20a0f"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 376, DateTimeKind.Utc).AddTicks(3533),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 376, DateTimeKind.Utc).AddTicks(1708),
                            Email = "adm@adm.com",
                            ForaDeUso = false,
                            Login = "adm",
                            Nome = "Administrador do sistema",
                            Password = "202cb962ac59075b964b07152d234b70"
                        },
                        new
                        {
                            Id = new Guid("065cd25a-49a3-43f0-91ec-1f3c53e4355b"),
                            AtualizadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 390, DateTimeKind.Utc).AddTicks(5751),
                            CriadoEmUtc = new DateTime(2020, 5, 22, 17, 36, 48, 390, DateTimeKind.Utc).AddTicks(5694),
                            Email = "teste@teste.com",
                            ForaDeUso = false,
                            Login = "string",
                            Nome = "Usuário de testes com login string e senha string",
                            Password = "b45cffe084dd3d20d928bee85e7b0f21"
                        });
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaDeQuemEhAvaliacaoMedia")
                        .WithOne("AvaliacaoMedia")
                        .HasForeignKey("SaveTheCookTower.Domain.Models.AvaliacaoDoUsuario", "ReceitaDeQuemEhAvaliacaoMediaId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.Usuario", "Usuario")
                        .WithMany("AvaliacoesFeitasPeloUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Cardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Cardapios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Categoria", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "CategoriaPai")
                        .WithMany("CategoriasFilhas")
                        .HasForeignKey("CategoriaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EquivalenciaEntreUnidadesDeMedida", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Destino")
                        .WithMany("EquivalenciasDestino")
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "Origem")
                        .WithMany("EquivalenciasOrigem")
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.EtapaDePreparo", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("EstapasDePreparo")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.InformacaoNutricional", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("InformacoesNutricionaisConsolidadas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("InformacoesNutricionais")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Ingrediente", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedidaDefaultParaListaIngredientes")
                        .WithMany("IngredientesUnidadeDefaultList")
                        .HasForeignKey("UnidadeMedidaDefaultParaListaIngredientesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedidaParaListaCompras")
                        .WithMany("IngredientesUnidadeListCompras")
                        .HasForeignKey("UnidadeMedidaParaListaComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapio", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Cardapio", "Cardapio")
                        .WithMany("Itens")
                        .HasForeignKey("CardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemCardapioReceita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.ItemCardapio", "ItemCardapio")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("ItensCardapioReceita")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.ItemListaIngredientes", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "Receita")
                        .WithMany("Ingredientes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.UnidadeMedida", "UnidadeMedida")
                        .WithMany("ItensListaIngredientes")
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaveTheCookTower.Domain.Models.Receita", b =>
                {
                    b.HasOne("SaveTheCookTower.Domain.Models.Categoria", "Categoria")
                        .WithMany("Receitas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaveTheCookTower.Domain.Models.FontePropriedadeIntelectual", "Fonte")
                        .WithMany("Receitas")
                        .HasForeignKey("FonteId");

                    b.HasOne("SaveTheCookTower.Domain.Models.Receita", "ReceitaPai")
                        .WithMany("ReceitasFilhas")
                        .HasForeignKey("ReceitaPaiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
